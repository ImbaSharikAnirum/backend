"use strict";

module.exports = {
  async findOrCreateContact({ phone, name }) {
    const normalizedPhone = phone.replace("@c.us", "");
    console.log("üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", normalizedPhone);

    let contact = await strapi.db
      .query("api::contact.contact")
      .findOne({ where: { phone: normalizedPhone } });

    console.log("üì± –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç:", contact);

    if (!contact) {
      const config = this.getGreenApiConfig("greenapi-01");
      const contactInfo = await this.getContactInfo({
        config,
        chatId: `${normalizedPhone}@c.us`,
      });

      console.log("üì• [GreenAPI] –û—Ç–≤–µ—Ç getContactInfo:", contactInfo);

      const newContactData = {
        phone: normalizedPhone,
        name: contactInfo.name || name,
        publishedAt: new Date().toISOString(),
      };

      if (contactInfo.avatarUrl) {
        console.log("‚úÖ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—É—á–µ–Ω:", contactInfo.avatarUrl);
        newContactData.avatarUrl = contactInfo.avatarUrl;
      } else {
        console.warn("‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π");
      }

      contact = await strapi.db.query("api::contact.contact").create({
        data: newContactData,
      });
      console.log("‚úÖ –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω:", contact);
    }

    return contact;
  },

  async findOrCreateChat({ chatId, contactId, shannelId, timestamp }) {
    console.log("üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞:", { chatId, contactId, shannelId });

    let chat = await strapi.db
      .query("api::chat.chat")
      .findOne({ where: { chatId } });

    console.log("üí¨ –ù–∞–π–¥–µ–Ω —á–∞—Ç:", chat);

    if (!chat) {
      console.log("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞");
      chat = await strapi.db.query("api::chat.chat").create({
        data: {
          chatId,
          contact: contactId,
          shannel: shannelId,
          lastMessage: timestamp,
          isClosed: false,
          publishedAt: new Date().toISOString(),
        },
      });

      console.log("‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω:", chat);

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–∞–Ω–∞–ª—É (shannel)
      if (shannelId) {
        await strapi.db.query("api::shannel.shannel").update({
          where: { id: shannelId },
          data: {
            chats: {
              connect: [{ id: chat.id }],
            },
          },
        });
        console.log("‚úÖ –ß–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞–Ω–∞–ª—É:", shannelId);
      }

      return { chat, isNew: true };
    }

    return { chat, isNew: false };
  },

  async saveMessage({
    chatId,
    direction,
    senderName,
    text,
    timestamp,
    status,
    emoji,
    messageId,
    reactionToMessageId,
  }) {
    return strapi.db.query("api::message.message").create({
      data: {
        chat: chatId,
        direction,
        senderName,
        text,
        emoji,
        timestamp,
        status,
        messageId: messageId || null,
        reactionToMessageId: reactionToMessageId || null,
        publishedAt: new Date().toISOString(),
      },
    });
  },

  getGreenApiConfig(externalId) {
    const MAP = {
      "greenapi-01": {
        apiUrl: "1103.api.green-api.com",
        idInstance: "1103217888",
        apiTokenInstance: process.env.TOKEN_GREEN_API_INSTANCE,
      },
    };
    return MAP[externalId];
  },

  async sendToGreenApi({ config, chatId, message }) {
    const formattedChatId = chatId.endsWith("@c.us")
      ? chatId
      : `${chatId}@c.us`;

    const url = `https://${config.apiUrl}/waInstance${config.idInstance}/sendMessage/${config.apiTokenInstance}`;

    const payload = {
      chatId: formattedChatId,
      message,
    };

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const responseData = await response.json();
      console.log("üì§ –û—Ç–≤–µ—Ç –æ—Ç Green API:", responseData);

      if (!response.ok || responseData?.code) {
        throw new Error(
          `Green API error: ${
            responseData.message || responseData.description || "Unknown error"
          }`
        );
      }

      return responseData;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ Green API:", error.message);
      throw error;
    }
  },

  async getContactInfo({ config, chatId }) {
    const formattedChatId = chatId.endsWith("@c.us")
      ? chatId
      : `${chatId}@c.us`;

    const url = `https://${config.apiUrl}/waInstance${config.idInstance}/getContactInfo/${config.apiTokenInstance}`;

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ chatId: formattedChatId }),
      });

      const responseData = await response.json();
      console.log("üì• [GreenAPI] getContactInfo response:", responseData);

      if (!response.ok || responseData?.code) {
        throw new Error(
          `Green API error: ${
            responseData.message || responseData.description || "Unknown error"
          }`
        );
      }

      return {
        name: responseData.name || null,
        avatarUrl: responseData.avatar || responseData.urlAvatar || null,
      };
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ:",
        error.message
      );
      return { name: null, avatarUrl: null };
    }
  },
};
