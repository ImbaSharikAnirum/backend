"use strict";

/**
 * chat controller
 */

const { createCoreController } = require("@strapi/strapi").factories;
const greenapiService = require("../../greenapi/services/greenapi");

module.exports = createCoreController("api::chat.chat", ({ strapi }) => ({
  async find(ctx) {
    // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é find
    const { data, meta } = await super.find(ctx);

    // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    if (!ctx.query.sort) {
      data.sort((a, b) => {
        const timeA = new Date(a.attributes.lastMessage || 0).getTime();
        const timeB = new Date(b.attributes.lastMessage || 0).getTime();
        return timeB - timeA; // –°–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ
      });
    }

    return { data, meta };
  },

  async create(ctx) {
    try {
      const { data } = ctx.request.body;
      console.log("üì• –í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ:", data);

      if (!data || !data.contact || !data.message?.text) {
        throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: contact –∏ message.text");
      }

      const { chatId, contact, shannel, lastMessage, isClosed, message } = data;
      console.log("üìù –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞:", {
        chatId,
        contact,
        shannel,
        lastMessage,
        isClosed,
      });

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º @c.us –µ—Å–ª–∏ –µ—Å—Ç—å)
      const normalizedPhone = contact.replace("@c.us", "");
      console.log("üì± –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:", normalizedPhone);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
      const existingChat = await strapi.db.query("api::chat.chat").findOne({
        where: { chatId: `${normalizedPhone}@c.us` },
        populate: ["contact", "shannel", "messages"],
      });
      console.log("üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç:", existingChat);

      if (existingChat) {
        console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç");
        // –ï—Å–ª–∏ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const createdMessage = await strapi.db
          .query("api::message.message")
          .create({
            data: {
              chat: existingChat.id,
              text: message.text,
              direction: message.direction,
              senderName: message.senderName,
              timestamp: message.timestamp,
              status: message.status,
              publishedAt: new Date().toISOString(),
            },
          });
        console.log("üí¨ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", createdMessage);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∏ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (
          !existingChat.contact?.attributes?.avatarUrl ||
          !existingChat.contact?.attributes?.name
        ) {
          console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞");
          const config = greenapiService.getGreenApiConfig("greenapi-01");
          const contactInfo = await greenapiService.getContactInfo({
            config,
            chatId: `${normalizedPhone}@c.us`,
          });
          console.log("üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∏–∑ WhatsApp:", contactInfo);

          const updateData = {};
          if (
            contactInfo.avatarUrl &&
            !existingChat.contact?.attributes?.avatarUrl
          ) {
            updateData.avatarUrl = contactInfo.avatarUrl;
          }
          if (contactInfo.name && !existingChat.contact?.attributes?.name) {
            updateData.name = contactInfo.name;
          }

          console.log("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", updateData);

          if (Object.keys(updateData).length > 0) {
            await strapi.db.query("api::contact.contact").update({
              where: { id: existingChat.contact.id },
              data: updateData,
            });
            console.log("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω");
          }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Green API
        try {
          const config = greenapiService.getGreenApiConfig("greenapi-01");
          const result = await greenapiService.sendToGreenApi({
            config,
            chatId: `${normalizedPhone}@c.us`,
            message: message.text,
          });
          console.log("üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Green API:", result);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∏–∑ Green API
          if (result && result.idMessage) {
            await strapi.db.query("api::message.message").update({
              where: { id: createdMessage.id },
              data: {
                messageId: result.idMessage,
                status: "sent",
              },
            });
            console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å ID –∏–∑ Green API");
          }
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ Green API:", error);
          await strapi.db.query("api::message.message").update({
            where: { id: createdMessage.id },
            data: {
              status: "error",
              error: error.message,
            },
          });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º lastMessage –≤ —á–∞—Ç–µ
        await strapi.db.query("api::chat.chat").update({
          where: { id: existingChat.id },
          data: {
            lastMessage: message.timestamp,
            isClosed: false,
          },
        });
        console.log("‚úÖ –ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω");

        return existingChat;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
      let contactData = await strapi.db.query("api::contact.contact").findOne({
        where: { phone: normalizedPhone },
      });
      console.log("üë§ –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:", contactData);

      if (!contactData) {
        console.log("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç");
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∏–∑ WhatsApp
        const config = greenapiService.getGreenApiConfig("greenapi-01");
        const contactInfo = await greenapiService.getContactInfo({
          config,
          chatId: `${normalizedPhone}@c.us`,
        });
        console.log("üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∏–∑ WhatsApp:", contactInfo);

        contactData = await strapi.db.query("api::contact.contact").create({
          data: {
            phone: normalizedPhone,
            name: contactInfo.name,
            avatarUrl: contactInfo.avatarUrl,
            publishedAt: new Date().toISOString(),
          },
        });
        console.log("‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç:", contactData);
      }

      // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
      const chat = await strapi.db.query("api::chat.chat").create({
        data: {
          chatId: `${normalizedPhone}@c.us`,
          contact: contactData.id,
          shannel,
          lastMessage,
          isClosed,
          publishedAt: new Date().toISOString(),
        },
      });
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω —á–∞—Ç:", chat);

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const createdMessage = await strapi.db
        .query("api::message.message")
        .create({
          data: {
            chat: chat.id,
            text: message.text,
            direction: message.direction,
            senderName: message.senderName,
            timestamp: message.timestamp,
            status: message.status,
            publishedAt: new Date().toISOString(),
          },
        });
      console.log("üí¨ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", createdMessage);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Green API
      try {
        const config = greenapiService.getGreenApiConfig("greenapi-01");
        const result = await greenapiService.sendToGreenApi({
          config,
          chatId: `${normalizedPhone}@c.us`,
          message: message.text,
        });
        console.log("üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Green API:", result);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∏–∑ Green API
        if (result && result.idMessage) {
          await strapi.db.query("api::message.message").update({
            where: { id: createdMessage.id },
            data: {
              messageId: result.idMessage,
              status: "sent",
            },
          });
          console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å ID –∏–∑ Green API");
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ Green API:", error);
        await strapi.db.query("api::message.message").update({
          where: { id: createdMessage.id },
          data: {
            status: "error",
            error: error.message,
          },
        });
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const populatedChat = await strapi.db.query("api::chat.chat").findOne({
        where: { id: chat.id },
        populate: ["contact", "shannel", "messages"],
      });
      console.log("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç:", populatedChat);

      return populatedChat;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:", error);
      throw error;
    }
  },
}));
