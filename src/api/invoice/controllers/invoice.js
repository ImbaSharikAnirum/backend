"use strict";

const { createCoreController } = require("@strapi/strapi").factories;
const axios = require("axios");
const crypto = require("crypto");

module.exports = createCoreController("api::invoice.invoice", ({ strapi }) => ({
  async createTinkoffPayment(ctx) {
    const {
      users_permissions_user: userId,
      student,
      group,
      amount,
      currency,
      invoiceId,
    } = ctx.request.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!amount || !currency) {
      return ctx.throw(
        400,
        "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: amount, currency"
      );
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userEmail = "guest@anirum.com"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (userId) {
      try {
        const user = await strapi
          .query("plugin::users-permissions.user")
          .findOne({
            where: { id: userId },
            select: ["email"],
          });

        if (user && user.email) {
          userEmail = user.email;
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å email –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
    }

    const orderId = invoiceId
      ? `order_invoice_${invoiceId}_${Date.now()}`
      : `order_${student}_${Date.now()}`;

    const terminalKey = process.env.TINKOFF_TERMINAL_KEY?.trim();
    const terminalPassword = process.env.TINKOFF_TERMINAL_PASSWORD?.trim();

    const amountInCoins = Math.round(amount * 100);

    const paramsForToken = {
      TerminalKey: terminalKey,
      Amount: amountInCoins,
      OrderId: orderId,
      Description: `–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞`,
    };

    const generateToken = (params, password) => {
      const tokenParams = { ...params, Password: password };
      const sortedKeys = Object.keys(tokenParams).sort();
      const tokenString = sortedKeys.map((key) => tokenParams[key]).join("");

      const hash = crypto
        .createHash("sha256")
        .update(tokenString)
        .digest("hex");

      return hash;
    };

    const token = generateToken(paramsForToken, terminalPassword);

    const requestData = {
      ...paramsForToken,
      Token: token,
      DATA: {
        Email: userEmail,
      },
      Receipt: {
        Email: userEmail,
        Taxation: "usn_income",
        Items: [
          {
            Name: "–ö—É—Ä—Å —Ä–∏—Å–æ–≤–∞–Ω–∏—è",
            Price: amountInCoins,
            Quantity: 1,
            Amount: amountInCoins,
            Tax: "none",
          },
        ],
      },
    };

    try {
      console.log("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Tinkoff API:", {
        orderId,
        amount: amountInCoins,
        userEmail,
        invoiceId,
      });

      const apiUrl = "https://securepay.tinkoff.ru/v2/Init";

      const response = await axios.post(apiUrl, requestData, {
        headers: { "Content-Type": "application/json" },
      });

      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Tinkoff API:", response.data);

      if (response.data.Success) {
        ctx.send({
          paymentUrl: response.data.PaymentURL,
          orderId,
          message: "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞",
        });
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ Tinkoff API:", response.data);
        ctx.throw(400, `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${response.data.Message}`);
      }
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ Tinkoff Init:",
        error.response?.data || error.message
      );
      ctx.throw(500, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  },

  async handleTinkoffNotification(ctx) {
    const { OrderId, Success, Status, PaymentId } = ctx.request.body;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ invoiceId –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ orderId
    let invoiceId = null;
    if (OrderId?.startsWith("order_invoice_")) {
      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: order_invoice_123_1703123456789
      const parts = OrderId.split("_");
      if (parts.length >= 3) {
        invoiceId = parts[2]; // –ë–µ—Ä–µ–º —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å (invoiceId)
      }
    }

    try {
      if (Success && Status === "CONFIRMED" && invoiceId) {
        await strapi.entityService.update("api::invoice.invoice", invoiceId, {
          data: {
            status_payment: true,
            paymentId: PaymentId || null,
            paymentDate: new Date(),
          },
        });
        return ctx.send({ status: "ok" });
      } else {
        console.log(
          "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω invoiceId:",
          Status
        );
        return ctx.send({ status: "Payment not confirmed" });
      }
    } catch (err) {
      return ctx.throw(500, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
    }
  },
}));
