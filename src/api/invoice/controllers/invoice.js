"use strict";

const { createCoreController } = require("@strapi/strapi").factories;
const axios = require("axios");
const crypto = require("crypto");

module.exports = createCoreController("api::invoice.invoice", ({ strapi }) => ({
  async createTinkoffPayment(ctx) {
    const {
      users_permissions_user: userId,
      student,
      group,
      amount,
      currency,
      invoiceId,
    } = ctx.request.body;

    if (!userId) {
      return ctx.throw(400, "User ID is required");
    }

    const user = await strapi.entityService.findOne(
      "plugin::users-permissions.user",
      userId
    );

    if (!user) {
      return ctx.throw(404, "User not found");
    }

    const orderId = invoiceId
      ? `order_invoice_${invoiceId}`
      : `order_${student}_${Date.now()}`;

    const terminalKey = process.env.TINKOFF_TERMINAL_KEY;
    const terminalPassword = process.env.TINKOFF_TERMINAL_PASSWORD;

    const amountInCoins = Math.round(amount * 100);

    // –§–æ—Ä–º–∏—Ä—É–µ–º Receipt –¥–ª—è —á–µ–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–Ω–ª–∞–π–Ω-–∫–∞—Å—Å–∞)
    const receipt = {
      Email: user.email || "",
      // Phone: user.phone || "",
      Taxation: "usn_income", // –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      Items: [
        {
          Name: "–ö—É—Ä—Å —Ä–∏—Å–æ–≤–∞–Ω–∏—è",
          Price: amountInCoins,
          Quantity: 1,
          Amount: amountInCoins,
          Tax: "none",
        },
      ],
    };

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
    const paramsForToken = {
      TerminalKey: terminalKey,
      Amount: amountInCoins,
      OrderId: orderId,
      Description: `–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞, —Å—Ç—É–¥–µ–Ω—Ç ${student}`,
    };

    // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ (SHA256) —Å –∫–ª—é—á–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –≤–∫–ª—é—á–∞—è Password
    const signParams = (params, password) => {
      const paramsWithPassword = { ...params, Password: password };
      const sortedKeys = Object.keys(paramsWithPassword).sort();
      const valuesString = sortedKeys
        .map((key) => key + paramsWithPassword[key])
        .join("");
      return crypto
        .createHash("sha256")
        .update(valuesString)
        .digest("hex")
        .toUpperCase();
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const token = signParams(paramsForToken, terminalPassword);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const requestData = {
      ...paramsForToken,
      Token: token,
      Customer: {
        Email: user.email || "",
        // Phone: user.phone || "",
      },
      Receipt: receipt,
    };

    try {
      console.log(
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ:",
        JSON.stringify(requestData, null, 2)
      );

      const response = await axios.post(
        "https://securepay.tinkoff.ru/v2/Init",
        requestData
      );

      console.log("–û—Ç–≤–µ—Ç –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ:", JSON.stringify(response.data, null, 2));

      if (response.data.Success) {
        ctx.send({
          paymentUrl: response.data.PaymentURL,
          orderId,
          message: "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞",
        });
      } else {
        ctx.throw(400, `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${response.data.Message}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ Tinkoff Init:", error);
      ctx.throw(500, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  },

  async handleTinkoffNotification(ctx) {
    const body = ctx.request.body;
    const { OrderId, Success, Status } = body;

    console.log("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Tinkoff:", body);

    let invoiceId = null;
    if (OrderId && OrderId.startsWith("order_invoice_")) {
      invoiceId = OrderId.replace("order_invoice_", "");
    }

    try {
      if (Success && Status === "CONFIRMED" && invoiceId) {
        await strapi.entityService.update("api::invoice.invoice", invoiceId, {
          data: {
            status_payment: true,
            paymentId: body.PaymentId || null,
            paymentDate: new Date(),
          },
        });
        return ctx.send({ status: "ok" });
      } else {
        console.log(
          "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω invoiceId:",
          Status
        );
        return ctx.send({ status: "Payment not confirmed" });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err);
      return ctx.throw(500, "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
    }
  },
}));
