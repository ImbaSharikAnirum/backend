"use strict";

/**
 * message controller
 */

const { createCoreController } = require("@strapi/strapi").factories;
const greenapiService = require("../../greenapi/services/greenapi");

module.exports = createCoreController("api::message.message", ({ strapi }) => ({
  async create(ctx) {
    const { data } = ctx.request.body;

    const { chat, direction, senderName, text, timestamp, status } = data;

    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
    const chatData = await strapi.entityService.findOne(
      "api::chat.chat",
      chat,
      {
        populate: ["shannel"],
      }
    );
    console.log("üí¨ CHAT FOUND:", chatData);

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    // 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º let –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π message
    let message = await strapi.entityService.create("api::message.message", {
      data: {
        chat,
        direction,
        senderName,
        text,
        timestamp,
        status,
        publishedAt: new Date().toISOString(),
      },
    });

    // 2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Green API –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (direction === "outgoing" && chatData.shannel) {
      try {
        const config = greenapiService.getGreenApiConfig(
          chatData.shannel.externalId
        );

        const result = await greenapiService.sendToGreenApi({
          config,
          chatId: chatData.chatId,
          message: text,
        });

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
        message = await strapi.entityService.update(
          "api::message.message",
          message.id,
          {
            data: {
              messageId: result.idMessage,
            },
          }
        );

        
      } catch (error) {
        console.error("‚ùå GREEN API ERROR:", error);
        throw error;
      }
    }

    return message;
  },
}));
